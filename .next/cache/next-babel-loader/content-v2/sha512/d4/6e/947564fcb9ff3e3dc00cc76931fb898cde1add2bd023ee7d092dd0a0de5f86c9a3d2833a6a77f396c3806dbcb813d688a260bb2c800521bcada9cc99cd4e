{"ast":null,"code":"import dbConnect from '../../utils/dbConnect';\nimport dbContext from '../../models/dbContext';\ndbConnect();\n\nconst handler = async (req, res) => {\n  const {\n    method\n  } = req;\n  const {\n    id\n  } = req.query;\n\n  switch (method) {\n    case \"POST\":\n      await dbContext.Purchase.create(req.body);\n      return res.status(200).json({\n        success: true,\n        message: 'Saving successful!'\n      });\n\n    case \"GET\":\n      if (!id) {\n        const purchases = await dbContext.Purchase.find({}).populate('product').populate('user');\n        return res.status(200).json(purchases);\n      } else {\n        const purchase = await dbContext.Purchase.findById(id).populate('product').populate('user');\n        return res.status(200).json(purchase);\n      }\n\n    case \"DELETE\":\n      await dbContext.Purchase.deleteOne({\n        _id: id\n      });\n      return res.status(200).json({\n        success: true,\n        message: 'Delete successful!'\n      });\n\n    default:\n      return res.status(400).json({\n        success: false,\n        message: 'Only POST requests are allowed.'\n      });\n  }\n};\n\nexport default handler; //export default withProtect(withRoles(handler, 'admin'));","map":{"version":3,"sources":["/Users/kelvintran/Documents/devcube/project/devcube_traidtime_backend/pages/api/purchases.js"],"names":["dbConnect","dbContext","handler","req","res","method","id","query","Purchase","create","body","status","json","success","message","purchases","find","populate","purchase","findById","deleteOne","_id"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,uBAAtB;AACA,OAAOC,SAAP,MAAsB,wBAAtB;AACAD,SAAS;;AAET,MAAME,OAAO,GAAG,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AAClC,QAAM;AAAEC,IAAAA;AAAF,MAAaF,GAAnB;AACA,QAAM;AAAEG,IAAAA;AAAF,MAASH,GAAG,CAACI,KAAnB;;AACA,UAAQF,MAAR;AACE,SAAK,MAAL;AACE,YAAMJ,SAAS,CAACO,QAAV,CAAmBC,MAAnB,CAA0BN,GAAG,CAACO,IAA9B,CAAN;AACA,aAAON,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BC,QAAAA,OAAO,EAAE,IADiB;AAE1BC,QAAAA,OAAO,EAAE;AAFiB,OAArB,CAAP;;AAIF,SAAK,KAAL;AACE,UAAI,CAACR,EAAL,EAAS;AACP,cAAMS,SAAS,GAAG,MAAMd,SAAS,CAACO,QAAV,CAAmBQ,IAAnB,CAAwB,EAAxB,EAA4BC,QAA5B,CAAqC,SAArC,EAAgDA,QAAhD,CAAyD,MAAzD,CAAxB;AACA,eAAOb,GAAG,CACPO,MADI,CACG,GADH,EAEJC,IAFI,CAECG,SAFD,CAAP;AAGD,OALD,MAMK;AACH,cAAMG,QAAQ,GAAG,MAAMjB,SAAS,CAACO,QAAV,CAAmBW,QAAnB,CAA4Bb,EAA5B,EAAgCW,QAAhC,CAAyC,SAAzC,EAAoDA,QAApD,CAA6D,MAA7D,CAAvB;AACA,eAAOb,GAAG,CACPO,MADI,CACG,GADH,EAEJC,IAFI,CAECM,QAFD,CAAP;AAGD;;AACH,SAAK,QAAL;AACE,YAAMjB,SAAS,CAACO,QAAV,CAAmBY,SAAnB,CAA6B;AAAEC,QAAAA,GAAG,EAAEf;AAAP,OAA7B,CAAN;AACA,aAAOF,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BC,QAAAA,OAAO,EAAE,IADiB;AAE1BC,QAAAA,OAAO,EAAE;AAFiB,OAArB,CAAP;;AAKF;AACE,aAAOV,GAAG,CACPO,MADI,CACG,GADH,EAEJC,IAFI,CAEC;AAAEC,QAAAA,OAAO,EAAE,KAAX;AAAkBC,QAAAA,OAAO,EAAE;AAA3B,OAFD,CAAP;AA5BJ;AAgCD,CAnCD;;AAoCA,eAAeZ,OAAf,C,CACA","sourcesContent":["import dbConnect from '../../utils/dbConnect'\nimport dbContext from '../../models/dbContext'\ndbConnect();\n\nconst handler = async (req, res) => {\n  const { method } = req;\n  const { id } = req.query;\n  switch (method) {\n    case \"POST\":\n      await dbContext.Purchase.create(req.body);\n      return res.status(200).json({\n        success: true,\n        message: 'Saving successful!',\n      });\n    case \"GET\":\n      if (!id) {\n        const purchases = await dbContext.Purchase.find({}).populate('product').populate('user');\n        return res\n          .status(200)\n          .json(purchases);\n      }\n      else {\n        const purchase = await dbContext.Purchase.findById(id).populate('product').populate('user');\n        return res\n          .status(200)\n          .json(purchase);\n      }\n    case \"DELETE\":\n      await dbContext.Purchase.deleteOne({ _id: id });\n      return res.status(200).json({\n        success: true,\n        message: 'Delete successful!',\n      });\n\n    default:\n      return res\n        .status(400)\n        .json({ success: false, message: 'Only POST requests are allowed.' });\n  }\n};\nexport default handler;\n//export default withProtect(withRoles(handler, 'admin'));\n"]},"metadata":{},"sourceType":"module"}