{"ast":null,"code":"const crypto = require('crypto');\n\nconst validator = require('validator');\n\nmodule.exports = mongoose => {\n  const refreshToken = new mongoose.Schema({\n    token: {\n      type: String,\n      trim: true\n    },\n    expiration: {\n      type: Date\n    },\n    issued: {\n      type: Date,\n      default: Date.now()\n    },\n    select: false\n  });\n  const userSchema = new mongoose.Schema({\n    name: {\n      type: String,\n      trim: true\n    },\n    email: {\n      type: String,\n      unique: true,\n      required: [true, 'Email cannot be empty'],\n      trim: true,\n      lowercase: true,\n      validate: [validator.isEmail]\n    },\n    photo: {\n      type: String,\n      default: 'default-user.jpg'\n    },\n    role: {\n      type: String,\n      enum: ['user', 'editor', 'admin', 'pro'],\n      default: 'user'\n    },\n    customerId: {\n      type: String\n    },\n    authLoginToken: {\n      type: String,\n      select: false\n    },\n    authLoginExpires: {\n      type: Date,\n      select: false\n    },\n    active: {\n      type: Boolean,\n      default: true,\n      select: false\n    },\n    refreshTokens: [refreshToken]\n  }, {\n    timestamps: true,\n    toJSON: {\n      virtuals: true\n    },\n    toObject: {\n      virtuals: true\n    }\n  }); // Virtual populate\n\n  userSchema.virtual('purchases', {\n    ref: 'Purchase',\n    foreignField: 'user',\n    localField: '_id'\n  });\n  userSchema.pre(/^find/, function (next) {\n    // This points to the current query\n    this.find({\n      active: {\n        $ne: false\n      }\n    });\n    next();\n  });\n\n  userSchema.methods.createAuthToken = function () {\n    const authToken = crypto.randomBytes(3).toString('hex');\n    this.authLoginToken = crypto.createHash('sha256').update(authToken).digest('hex');\n    this.authLoginExpires = Date.now() + 10 * 60 * 1000;\n    return authToken;\n  };\n\n  return userSchema;\n};","map":{"version":3,"sources":["/Users/kelvintran/Documents/devcube/project/devcube_traidtime_backend/models/user.js"],"names":["crypto","require","validator","module","exports","mongoose","refreshToken","Schema","token","type","String","trim","expiration","Date","issued","default","now","select","userSchema","name","email","unique","required","lowercase","validate","isEmail","photo","role","enum","customerId","authLoginToken","authLoginExpires","active","Boolean","refreshTokens","timestamps","toJSON","virtuals","toObject","virtual","ref","foreignField","localField","pre","next","find","$ne","methods","createAuthToken","authToken","randomBytes","toString","createHash","update","digest"],"mappings":"AAAA,MAAMA,MAAM,GAAGC,OAAO,CAAC,QAAD,CAAtB;;AACA,MAAMC,SAAS,GAAGD,OAAO,CAAC,WAAD,CAAzB;;AACAE,MAAM,CAACC,OAAP,GAAkBC,QAAD,IAAc;AAC7B,QAAMC,YAAY,GAAG,IAAID,QAAQ,CAACE,MAAb,CAAoB;AACvCC,IAAAA,KAAK,EAAE;AACLC,MAAAA,IAAI,EAAEC,MADD;AAELC,MAAAA,IAAI,EAAE;AAFD,KADgC;AAKvCC,IAAAA,UAAU,EAAE;AACVH,MAAAA,IAAI,EAAEI;AADI,KAL2B;AAQvCC,IAAAA,MAAM,EAAE;AACNL,MAAAA,IAAI,EAAEI,IADA;AAENE,MAAAA,OAAO,EAAEF,IAAI,CAACG,GAAL;AAFH,KAR+B;AAYvCC,IAAAA,MAAM,EAAE;AAZ+B,GAApB,CAArB;AAeA,QAAMC,UAAU,GAAG,IAAIb,QAAQ,CAACE,MAAb,CACjB;AACEY,IAAAA,IAAI,EAAE;AACJV,MAAAA,IAAI,EAAEC,MADF;AAEJC,MAAAA,IAAI,EAAE;AAFF,KADR;AAKES,IAAAA,KAAK,EAAE;AACLX,MAAAA,IAAI,EAAEC,MADD;AAELW,MAAAA,MAAM,EAAE,IAFH;AAGLC,MAAAA,QAAQ,EAAE,CAAC,IAAD,EAAO,uBAAP,CAHL;AAILX,MAAAA,IAAI,EAAE,IAJD;AAKLY,MAAAA,SAAS,EAAE,IALN;AAMLC,MAAAA,QAAQ,EAAE,CAACtB,SAAS,CAACuB,OAAX;AANL,KALT;AAaEC,IAAAA,KAAK,EAAE;AACLjB,MAAAA,IAAI,EAAEC,MADD;AAELK,MAAAA,OAAO,EAAE;AAFJ,KAbT;AAiBEY,IAAAA,IAAI,EAAE;AACJlB,MAAAA,IAAI,EAAEC,MADF;AAEJkB,MAAAA,IAAI,EAAE,CAAC,MAAD,EAAS,QAAT,EAAmB,OAAnB,EAA4B,KAA5B,CAFF;AAGJb,MAAAA,OAAO,EAAE;AAHL,KAjBR;AAsBEc,IAAAA,UAAU,EAAE;AACVpB,MAAAA,IAAI,EAAEC;AADI,KAtBd;AAyBEoB,IAAAA,cAAc,EAAE;AACdrB,MAAAA,IAAI,EAAEC,MADQ;AAEdO,MAAAA,MAAM,EAAE;AAFM,KAzBlB;AA6BEc,IAAAA,gBAAgB,EAAE;AAChBtB,MAAAA,IAAI,EAAEI,IADU;AAEhBI,MAAAA,MAAM,EAAE;AAFQ,KA7BpB;AAiCEe,IAAAA,MAAM,EAAE;AACNvB,MAAAA,IAAI,EAAEwB,OADA;AAENlB,MAAAA,OAAO,EAAE,IAFH;AAGNE,MAAAA,MAAM,EAAE;AAHF,KAjCV;AAsCEiB,IAAAA,aAAa,EAAE,CAAC5B,YAAD;AAtCjB,GADiB,EAyCjB;AAAE6B,IAAAA,UAAU,EAAE,IAAd;AAAoBC,IAAAA,MAAM,EAAE;AAAEC,MAAAA,QAAQ,EAAE;AAAZ,KAA5B;AAAgDC,IAAAA,QAAQ,EAAE;AAAED,MAAAA,QAAQ,EAAE;AAAZ;AAA1D,GAzCiB,CAAnB,CAhB6B,CA4D7B;;AACAnB,EAAAA,UAAU,CAACqB,OAAX,CAAmB,WAAnB,EAAgC;AAC9BC,IAAAA,GAAG,EAAE,UADyB;AAE9BC,IAAAA,YAAY,EAAE,MAFgB;AAG9BC,IAAAA,UAAU,EAAE;AAHkB,GAAhC;AAMAxB,EAAAA,UAAU,CAACyB,GAAX,CAAe,OAAf,EAAwB,UAAUC,IAAV,EAAgB;AACtC;AACA,SAAKC,IAAL,CAAU;AAAEb,MAAAA,MAAM,EAAE;AAAEc,QAAAA,GAAG,EAAE;AAAP;AAAV,KAAV;AACAF,IAAAA,IAAI;AACL,GAJD;;AAMA1B,EAAAA,UAAU,CAAC6B,OAAX,CAAmBC,eAAnB,GAAqC,YAAY;AAC/C,UAAMC,SAAS,GAAGjD,MAAM,CAACkD,WAAP,CAAmB,CAAnB,EAAsBC,QAAtB,CAA+B,KAA/B,CAAlB;AAEA,SAAKrB,cAAL,GAAsB9B,MAAM,CACzBoD,UADmB,CACR,QADQ,EAEnBC,MAFmB,CAEZJ,SAFY,EAGnBK,MAHmB,CAGZ,KAHY,CAAtB;AAKA,SAAKvB,gBAAL,GAAwBlB,IAAI,CAACG,GAAL,KAAa,KAAK,EAAL,GAAU,IAA/C;AAEA,WAAOiC,SAAP;AACD,GAXD;;AAYA,SAAO/B,UAAP;AACD,CAtFD","sourcesContent":["const crypto = require('crypto');\nconst validator = require('validator');\nmodule.exports = (mongoose) => {\n  const refreshToken = new mongoose.Schema({\n    token: {\n      type: String,\n      trim: true,\n    },\n    expiration: {\n      type: Date,\n    },\n    issued: {\n      type: Date,\n      default: Date.now(),\n    },\n    select: false,\n  });\n\n  const userSchema = new mongoose.Schema(\n    {\n      name: {\n        type: String,\n        trim: true,\n      },\n      email: {\n        type: String,\n        unique: true,\n        required: [true, 'Email cannot be empty'],\n        trim: true,\n        lowercase: true,\n        validate: [validator.isEmail],\n      },\n      photo: {\n        type: String,\n        default: 'default-user.jpg',\n      },\n      role: {\n        type: String,\n        enum: ['user', 'editor', 'admin', 'pro'],\n        default: 'user',\n      },\n      customerId: {\n        type: String,\n      },\n      authLoginToken: {\n        type: String,\n        select: false,\n      },\n      authLoginExpires: {\n        type: Date,\n        select: false,\n      },\n      active: {\n        type: Boolean,\n        default: true,\n        select: false,\n      },\n      refreshTokens: [refreshToken],\n    },\n    { timestamps: true, toJSON: { virtuals: true }, toObject: { virtuals: true } }\n  );\n\n  // Virtual populate\n  userSchema.virtual('purchases', {\n    ref: 'Purchase',\n    foreignField: 'user',\n    localField: '_id',\n  });\n\n  userSchema.pre(/^find/, function (next) {\n    // This points to the current query\n    this.find({ active: { $ne: false } });\n    next();\n  });\n\n  userSchema.methods.createAuthToken = function () {\n    const authToken = crypto.randomBytes(3).toString('hex');\n\n    this.authLoginToken = crypto\n      .createHash('sha256')\n      .update(authToken)\n      .digest('hex');\n\n    this.authLoginExpires = Date.now() + 10 * 60 * 1000;\n\n    return authToken;\n  };\n  return userSchema;\n} \n"]},"metadata":{},"sourceType":"script"}